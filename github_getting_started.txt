# On neukum or some host with local home.
#   Setup your local config with the values used in your github account
#   This gets stored in ~/.gitconfig
git config --global user.name "micahgarlichmiller"
git config --global user.email "micahgarlichmiller@gmail.com"
git config --global push.default simple
git config --global --add alias.permission-reset '!git diff -p -R --no-ext-diff --no-color | grep -E "^(diff|(old|new) mode)" --color=never | git apply'


# figure out where you want to manage your git repos from.  I use ~/git
mkdir git
cd git

# go to the github site and create a new repo
#   Click on cat in upper left to return to github home
#   Click on "New" to create a new repository.
#   I created mine as public and I didnt create a README
#   My remote repo is called micahgarlichmiller/MGMgettingstarted

# after you create a repo in github, it pretty much tells you what to
# do, but first we will create a local dir of the same name
mkdir MGMgettingstarted
cd MGMgettingstarted

# Now, using the instructions from github create a new repo from the 
# commandline
echo "# MGMgettingstarted" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/micahgarlichmiller/MGMgettingstarted.git
git push -u origin main
# You now should be able to see your file up in github

# next I add a file to the repo (this file)
vi MGMgettingstartedwithgithub.txt
git status
git add MGMgettingstartedwithgithub.txt
git commit -m "Added getting started instructions"
git push

# I am not sure if this will work but I am adding alias to handle restoring
# file permissions:
git config --global --add alias.permission-reset '!git diff -p -R --no-ext-diff --no-color | grep -E "^(diff|(old|new) mode)" --color=never | git apply'

# I dont want to have to type a passwd each time so I created an ssh key
# and associated it with my github account.  To do this just type ssh-keygen
# and follow the prompts... the only thing that I did special was to give this
# keypair a name indicating that I would be using it for my github account
# and I also put the current date in the name... this is useful for aging
# keys out.
ssh-keygen   # and follow prompts
# or
# ssh-keygen -o -a 100 -t ed25519 -f ~/.ssh/id_mgmws_github -C "mgmgws-github-20210905"
# then you take your new public key and add it to the github site
# Settings -> SSH and GPG keys -> New SSH key
# then test:
ssh -i ~/.ssh/id_rsa-temp-github-20210429 -T git@github.com

# then I setup a deploy key.  A deploy key is handy because it provides access
# to a single repo in a read only fashion by default.  (name it something good)
ssh-keygen # and follow prompts
# Add it as a deploy key to the repo in question
# Go to repo -> Settings -> Deploy Key -> add key (add the pubkey from prev)
# Ref: https://docs.github.com/en/developers/overview/managing-deploy-keys
# then test, eg
ssh -i ~/.ssh/dep_key_github_MGMgettingstarted_20210430 -T git@github.com

# switch over from using https to using ssh for github.  Go to project,
# select clone/download key, copy the ssh key and then use it as shown below
[epmgarlich@neukum MGMgettingstarted]$ git remote -v   #DISPLAY STATE BEFORE
origin	https://github.com/micahgarlichmiller/MGMgettingstarted.git (fetch)
origin	https://github.com/micahgarlichmiller/MGMgettingstarted.git (push)
[epmgarlich@neukum MGMgettingstarted]$ git remote set-url origin git@github.com:micahgarlichmiller/MGMgettingstarted.git
[epmgarlich@neukum MGMgettingstarted]$ git remote -v   #DISPLAY STATE AFTER
origin	git@github.com:micahgarlichmiller/MGMgettingstarted.git (fetch)
origin	git@github.com:micahgarlichmiller/MGMgettingstarted.git (push)

# note: the above deploy doc includes info for using multiple deploy keys by 
#       modifying ~/.ssh/config
# I am going to setup an alias for my own use 
[epmgarlich@neukum MGMgettingstarted]$ cat ~/.ssh/config
Host github.com-mygithubkey
        Hostname github.com
        IdentityFile=/home/uadmin/epmgarlich/.ssh/id_rsa-temp-github-20210429
[epmgarlich@neukum MGMgettingstarted]$

# so now I am going to reset the remote to use this alias like so:
git remote set-url origin git@github.com-mygithubkey:micahgarlichmiller/MGMgettingstarted.git

# and now... I can do a git push without providing my passwd.


# a useful command for switching your primary group before running a
# command: 
sg $group -c '$cmd'
q!

# useful resources:
https://www.howtoforge.com/tutorial/install-git-and-github-on-ubuntu/

# an example of cloning a useful repo from github
cd ~/git
git clone git@github.com:ansible/ansible-examples.git
cd ansible-examples/
ls
